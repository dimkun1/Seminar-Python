import input_n
import log
import excep
import actions_mod

from time import sleep
import logging
from telegram import __version__ as TG_VER
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters)
 
try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)
if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(f"This example is not compatible with your current PTB version {TG_VER}. To view the "\
        f"{TG_VER} version of this bot, "\
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html")


logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)



reply_keyboard_start = [["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"],\
                        ["–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤"],\
                        ["–í—ã—Ö–æ–¥"]]

reply_keyboard_choice_num = [["–¶–µ–ª—ã–µ"],\
                            ["–í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ"],\
                            ["–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ"],\
                            ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],\
                            ["–í—ã—Ö–æ–¥"]]

reply_keyboard_action = [["–°–ª–æ–∂–µ–Ω–∏–µ"],\
                        ["–í—ã—á–∏—Ç–∞–Ω–∏–µ"],\
                        ["–£–º–Ω–æ–∂–µ–Ω–∏–µ"],\
                        ["–î–µ–ª–µ–Ω–∏–µ"],\
                        ["–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ"],\
                        ["–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è"],\
                        ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],\
                        ["–í—ã—Ö–æ–¥"]]

reply_keyboard_next_action = [["–ü—Ä–æ–¥–æ–∂–∏—Ç—å"],\
                            ["–ù–æ–≤—ã–π –≤–≤–æ–¥"],\
                            ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],\
                            ["–í—ã—Ö–æ–¥"]]

markup_start = ReplyKeyboardMarkup(reply_keyboard_start, one_time_keyboard=True)
markup_choice_num = ReplyKeyboardMarkup(reply_keyboard_choice_num, one_time_keyboard=True)
markup_action = ReplyKeyboardMarkup(reply_keyboard_action, one_time_keyboard=True)
markup_next_action = ReplyKeyboardMarkup(reply_keyboard_next_action, one_time_keyboard=True)


main_menu, numbers_menu, action_menu, end_prog,\
int_num_one, int_num_two, next_action, result_action,\
float_num_one, float_num_two, complex_num_one, complex_num_two,\
complex_num_three, complex_num_four = range(14)


type_menu_1 = ""
type_menu_2 = ""
type_menu_3 = ""
type_menu_4 = ""
answer = ""

result = 0
x = 0
y = 0

#### –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ####

async def main_m (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    clear_data()
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤\n–í—ã—Ö–æ–¥', reply_markup=markup_start)
    global type_menu_1
    type_menu_1 = update.message.text
    context.user_data["choice"] = type_menu_1
    return main_menu


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    log.universal_logger("–í—Ö–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É", data_description = "–ó–∞–ø—É—Å–∫")
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Äüî•')
    sleep(1)
    await update.message.reply_text('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤\n–í—ã—Ö–æ–¥', reply_markup=markup_start)
    return main_menu
    

async def choice_num (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    clear_data()
    await update.message.reply_text ('–° –∫–∞–∫–∏–º–∏ —á–∏—Å–ª–∞–º–∏ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å?\n\
–¶–µ–ª—ã–µ\n–í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ\n–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥',reply_markup=markup_choice_num)
    global type_menu_2
    type_menu_2 = update.message.text
    return numbers_menu


async def number_menu_choice_complex (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å —á–∏—Å–ª–∞ 1:')
    return complex_num_one

async def number_menu_choice_int (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1:')
    return int_num_one

async def number_menu_choice_float (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1:')
    return float_num_one


async def res_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global type_menu_4
    type_menu_4 = update.message.text
    context.user_data["choice"] = type_menu_4
    return next_action


async def choice_action (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global type_menu_3
    type_menu_3 = update.message.text
    context.user_data["choice"] = type_menu_3
    if type_menu_3 == "–°–ª–æ–∂–µ–Ω–∏–µ" or type_menu_3 == "–í—ã—á–∏—Ç–∞–Ω–∏–µ" or type_menu_3 == "–£–º–Ω–æ–∂–µ–Ω–∏–µ" or excep.excep_check_zero() is True:
        return action_menu
    else:
        return excep.excep_check_zero


async def repeat_same_num(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.universal_logger((x,y), data_description = "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    await update.message.reply_text (f'–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å —á–∏—Å–ª–∞–º–∏ \
"{x}" –∏ "{y}"?\n–°—É–º–º–∞\n–í—ã—á–∏—Ç–∞–Ω–∏–µ\n–£–º–Ω–æ–∂–µ–Ω–∏–µ\n–î–µ–ª–µ–Ω–∏–µ\n\
–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ\n–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥', reply_markup=markup_action)
    return action_menu


async def ending (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    log.universal_logger("–ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", data_description = "–í—ã—Ö–æ–¥") 
    user_data = context.user_data
    if "choice" in user_data:
        del user_data["choice"]
    await update.message.reply_text(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    clear_data()
    user_data.clear()
    return ConversationHandler.END


def clear_data():
    global type_menu_1
    type_menu_1 = ""
    global type_menu_2
    type_menu_2 = ""
    global type_menu_3
    type_menu_3 = ""
    global type_menu_4
    type_menu_4 = ""
    global answer
    answer = ""


#### –í–≤–æ–¥ —á–∏—Å–µ–ª #####


async def int_num_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global x
    x = int(update.message.text)
    context.user_data["choice"] = x
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 2:')
    return int_num_two

async def int_num_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global y
    y = int(update.message.text)
    context.user_data["choice"] = y
    log.universal_logger((x,y), data_description = "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    await update.message.reply_text (f'–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å —á–∏—Å–ª–∞–º–∏ \
"{x}" –∏ "{y}"?\n–°—É–º–º–∞\n–í—ã—á–∏—Ç–∞–Ω–∏–µ\n–£–º–Ω–æ–∂–µ–Ω–∏–µ\n–î–µ–ª–µ–Ω–∏–µ\n\
–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ\n–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥', reply_markup=markup_action)
    return action_menu

async def float_num_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> float:
    global x
    x = float(update.message.text)
    context.user_data["choice"] = x
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 2:')
    return float_num_two

async def float_num_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> float:
    global y
    y = float(update.message.text)
    context.user_data["choice"] = y
    log.universal_logger((x,y), data_description = "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    await update.message.reply_text (f'–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å —á–∏—Å–ª–∞–º–∏ \
"{x}" –∏ "{y}"?\n–°—É–º–º–∞\n–í—ã—á–∏—Ç–∞–Ω–∏–µ\n–£–º–Ω–æ–∂–µ–Ω–∏–µ\n–î–µ–ª–µ–Ω–∏–µ\n\
–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ\n–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥', reply_markup=markup_action)
    return action_menu


async def complex_num_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> float:
    global x_1
    x_1 = float(update.message.text)
    context.user_data["choice"] = x_1
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –º–Ω–Ω–∏–º—É—é —á–∞—Å—Ç—å —á–∏—Å–ª–∞ 1:')
    return complex_num_two

async def complex_num_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> float:
    global x
    x_2 = float(update.message.text)
    context.user_data["choice"] = x_2
    x = complex(x_1, x_2)
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å —á–∏—Å–ª–∞ 2:')
    return complex_num_three

async def complex_num_3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> float:
    global y_1
    y_1 = float(update.message.text)
    context.user_data["choice"] = y_1
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –º–Ω–Ω–∏–º—É—é —á–∞—Å—Ç—å —á–∏—Å–ª–∞ 2:')
    return complex_num_four

async def complex_num_4(update: Update, context: ContextTypes.DEFAULT_TYPE) -> float:
    global y
    y_2 = float(update.message.text)
    context.user_data["choice"] = y_2
    y = complex(y_1, y_2)
    log.universal_logger((x,y), data_description = "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    await update.message.reply_text (f'–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å —á–∏—Å–ª–∞–º–∏ \
"{x}" –∏ "{y}"?\n–°—É–º–º–∞\n–í—ã—á–∏—Ç–∞–Ω–∏–µ\n–£–º–Ω–æ–∂–µ–Ω–∏–µ\n–î–µ–ª–µ–Ω–∏–µ\n\
–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ\n–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥', reply_markup=markup_action)
    return action_menu







#### –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ####


async def summ (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global result
    result = x + y
    log.universal_logger(result, data_description = "–°—É–º–º–∞")
    await update.message.reply_text(f'–°—É–º–º–∞ —á–∏—Å–µ–ª {x} –∏ {y} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {result}')
    sleep(1)
    await update.message.reply_text(f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ "{x}" –∏ "{y}"?\n \
–ü—Ä–æ–¥–æ–∂–∏—Ç—å\n–ù–æ–≤—ã–π –≤–≤–æ–¥\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥',\
 reply_markup=markup_next_action)
    return next_action


async def float_div(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global result
    result = x / y
    log.universal_logger(result, data_description = "–ß–∞—Å—Ç–Ω–æ–µ")
    await update.message.reply_text(f'–ß–∞—Å—Ç–Ω–æ–µ —á–∏—Å–µ–ª {x} –∏ {y} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {result}')
    sleep(1)
    await update.message.reply_text(f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ "{x}" –∏ "{y}"?\n \
–ü—Ä–æ–¥–æ–∂–∏—Ç—å\n–ù–æ–≤—ã–π –≤–≤–æ–¥\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥',\
 reply_markup=markup_next_action)
    return next_action


async def floor_div (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global result
    result = x // y
    log.universal_logger(result, data_description = "–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ")
    await update.message.reply_text(f'–ß–∞—Å—Ç–Ω–æ–µ –æ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–µ–ª {x} –∏ {y} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {result}')
    sleep(1)
    await update.message.reply_text(f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ "{x}" –∏ "{y}"?\n \
–ü—Ä–æ–¥–æ–∂–∏—Ç—å\n–ù–æ–≤—ã–π –≤–≤–æ–¥\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥',\
 reply_markup=markup_next_action)
    return next_action


async def mod_div (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global result
    result = x % y
    log.universal_logger(result, data_description = "–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è")
    await update.message.reply_text(f'–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–µ–ª {x} –∏ {y} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {result}')
    sleep(1)
    await update.message.reply_text(f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ "{x}" –∏ "{y}"?\n \
–ü—Ä–æ–¥–æ–∂–∏—Ç—å\n–ù–æ–≤—ã–π –≤–≤–æ–¥\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥',\
 reply_markup=markup_next_action)
    return next_action


async def sub (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global result
    result = x - y
    log.universal_logger(result, data_description = "–†–∞–∑–Ω–æ—Å—Ç—å")    
    await update.message.reply_text(f'–†–∞–∑–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª {x} –∏ {y} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {result}')
    sleep(1)
    await update.message.reply_text(f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ "{x}" –∏ "{y}"?\n \
–ü—Ä–æ–¥–æ–∂–∏—Ç—å\n–ù–æ–≤—ã–π –≤–≤–æ–¥\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥',\
 reply_markup=markup_next_action)
    return next_action


async def mult (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global result
    result = x * y
    log.universal_logger(result, data_description = "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
    await update.message.reply_text(f'–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª {x} –∏ {y} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {result}')
    sleep(1)
    await update.message.reply_text(f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ "{x}" –∏ "{y}"?\n \
–ü—Ä–æ–¥–æ–∂–∏—Ç—å\n–ù–æ–≤—ã–π –≤–≤–æ–¥\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã—Ö–æ–¥',\
 reply_markup=markup_next_action)
    return next_action






    




def main() -> None:
    application = Application.builder().token('5556099291:AAE3PotRo3idwYllO9WKcJMbXwWdf0t7WTU').build()
    conv_handler = ConversationHandler\
        \
        (entry_points=[CommandHandler("start", start)],\
        \
        states={main_menu: [MessageHandler(filters.Regex("^–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä$"), choice_num),\
                            MessageHandler(filters.Regex("^–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤$"), log.print_log),\
                            MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), ending)],\
                numbers_menu: [MessageHandler(filters.Regex("^–¶–µ–ª—ã–µ$"), number_menu_choice_int),
                               MessageHandler(filters.Regex("^–í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ$"), number_menu_choice_float),\
                               MessageHandler(filters.Regex("^–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ$"), number_menu_choice_complex),\
                               MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), main_m),\
                               MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), ending)],\
                int_num_one: [MessageHandler(filters.TEXT & ~(filters.COMMAND), int_num_1)],\
                int_num_two: [MessageHandler(filters.TEXT & ~(filters.COMMAND), int_num_2)],\
                float_num_one: [MessageHandler(filters.TEXT & ~(filters.COMMAND), float_num_1)],\
                float_num_two: [MessageHandler(filters.TEXT & ~(filters.COMMAND), float_num_2)],\
                complex_num_one: [MessageHandler(filters.TEXT & ~(filters.COMMAND), complex_num_1)],\
                complex_num_two: [MessageHandler(filters.TEXT & ~(filters.COMMAND), complex_num_2)],\
                complex_num_three: [MessageHandler(filters.TEXT & ~(filters.COMMAND), complex_num_3)],\
                complex_num_four: [MessageHandler(filters.TEXT & ~(filters.COMMAND), complex_num_4)],\
                action_menu: [MessageHandler(filters.Regex("^–°–ª–æ–∂–µ–Ω–∏–µ$"), summ),\
                               MessageHandler(filters.Regex("^–í—ã—á–∏—Ç–∞–Ω–∏–µ$"), sub),\
                               MessageHandler(filters.Regex("^–£–º–Ω–æ–∂–µ–Ω–∏–µ$"), mult),\
                               MessageHandler(filters.Regex("^–î–µ–ª–µ–Ω–∏–µ$"), float_div),\
                               MessageHandler(filters.Regex("^–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ$"), floor_div),\
                               MessageHandler(filters.Regex("^–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è$"), mod_div),\
                               MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), main_m),\
                               MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), ending)],\
                next_action: [MessageHandler(filters.Regex("^–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å$"), repeat_same_num),\
                               MessageHandler(filters.Regex("^–ù–æ–≤—ã–π –≤–≤–æ–¥$"), choice_num),\
                               MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), main_m),\
                               MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), ending)]},
                
        fallbacks=[MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), ending)])
 
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()